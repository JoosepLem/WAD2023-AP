{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    posts: []\n  },\n  getters: {\n    getPosts: state => {\n      return state.posts;\n    }\n  },\n  mutations: {\n    setPosts(state, posts) {\n      state.posts = posts;\n      console.log(posts);\n    },\n    addPost(state, post) {\n      state.posts.push(post);\n    }\n  },\n  actions: {\n    async addPostAct({\n      commit\n    }, data) {\n      try {\n        const response = await fetch(\"http://localhost:3000/post/add-post\", {\n          method: \"POST\",\n          // headers: {\"Content-Type\": \"application/json\"},\n          credentials: 'include',\n          body: JSON.stringify(data)\n        });\n        const result = await response.json();\n        commit('addPost', result); // Assuming your POST request returns the added post\n      } catch (e) {\n        console.error(e);\n      }\n    },\n    async getAllPostsAct({\n      commit\n    }) {\n      try {\n        const response = await fetch(`http://localhost:3000/post/get-all`);\n        const data = await response.json();\n        commit('setPosts', data);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","state","posts","getters","getPosts","mutations","setPosts","console","log","addPost","post","push","actions","addPostAct","commit","data","response","fetch","method","credentials","body","JSON","stringify","result","json","e","error","getAllPostsAct","err","message","modules"],"sources":["/Users/nikita_filin/Desktop/TU/WAD/WAD2023-AP/blog/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    posts: []\n  },\n  getters: {\n    getPosts: (state) => {\n      return state.posts;\n    },\n  },\n\n  mutations: {\n    setPosts(state, posts) {\n      state.posts = posts;\n      console.log(posts)\n    },\n    addPost(state, post) {\n      state.posts.push(post);\n    },\n  },\n\n  actions: {\n    async addPostAct({ commit }, data) {\n      try {\n        const response = await fetch(\"http://localhost:3000/post/add-post\", {\n          method: \"POST\",\n          // headers: {\"Content-Type\": \"application/json\"},\n          credentials: 'include',\n          body: JSON.stringify(data)\n        });\n        const result = await response.json();\n        commit('addPost', result); // Assuming your POST request returns the added post\n      } catch (e) {\n        console.error(e);\n      }\n    },\n\n    async getAllPostsAct({ commit }) {\n      try {\n        const response = await fetch(`http://localhost:3000/post/get-all`);\n        const data = await response.json();\n        commit('setPosts', data);\n      } catch (err) {\n        console.error(err.message);\n      }\n    },\n  },\n\n  modules: {\n  }\n})\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,MAAM;AAElC,eAAeA,WAAW,CAAC;EACzBC,KAAK,EAAE;IACLC,KAAK,EAAE;EACT,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQ,EAAGH,KAAK,IAAK;MACnB,OAAOA,KAAK,CAACC,KAAK;IACpB;EACF,CAAC;EAEDG,SAAS,EAAE;IACTC,QAAQA,CAACL,KAAK,EAAEC,KAAK,EAAE;MACrBD,KAAK,CAACC,KAAK,GAAGA,KAAK;MACnBK,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;IACpB,CAAC;IACDO,OAAOA,CAACR,KAAK,EAAES,IAAI,EAAE;MACnBT,KAAK,CAACC,KAAK,CAACS,IAAI,CAACD,IAAI,CAAC;IACxB;EACF,CAAC;EAEDE,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAC;MAAEC;IAAO,CAAC,EAAEC,IAAI,EAAE;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;UAClEC,MAAM,EAAE,MAAM;UACd;UACAC,WAAW,EAAE,SAAS;UACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;QAC3B,CAAC,CAAC;QACF,MAAMQ,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACpCV,MAAM,CAAC,SAAS,EAAES,MAAM,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOE,CAAC,EAAE;QACVlB,OAAO,CAACmB,KAAK,CAACD,CAAC,CAAC;MAClB;IACF,CAAC;IAED,MAAME,cAAcA,CAAC;MAAEb;IAAO,CAAC,EAAE;MAC/B,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,oCAAmC,CAAC;QAClE,MAAMF,IAAI,GAAG,MAAMC,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCV,MAAM,CAAC,UAAU,EAAEC,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOa,GAAG,EAAE;QACZrB,OAAO,CAACmB,KAAK,CAACE,GAAG,CAACC,OAAO,CAAC;MAC5B;IACF;EACF,CAAC;EAEDC,OAAO,EAAE,CACT;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}