{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"individual-post\"\n};\nconst _hoisted_2 = {\n  class: \"post-body\"\n};\nconst _hoisted_3 = {\n  class: \"post-actions\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", null, _toDisplayString('Post ' + $data.post.id), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"textarea\", null, _toDisplayString($data.post.body), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.updatePost && $options.updatePost(...args))\n  }, \"Update\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.deletePost && $options.deletePost(...args))\n  }, \"Delete\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$data","post","id","_hoisted_2","body","_hoisted_3","onClick","_cache","args","$options","updatePost","deletePost"],"sources":["/Users/nikita_filin/Desktop/TU/WAD/WAD2023-AP/blog/src/views/IndividualPost.vue"],"sourcesContent":["<template>\n  <div class=\"individual-post\">\n    <h1>{{ 'Post ' + post.id }}</h1>\n    <div class=\"post-body\">\n      <textarea>{{ post.body }}</textarea>\n    </div>\n    <div class=\"post-actions\">\n      <button @click=\"updatePost\">Update</button>\n      <button @click=\"deletePost\">Delete</button>\n    </div>\n  </div>\n</template>\n  \n<script>\nexport default {\n  data() {\n    return {\n      post: {},\n    };\n  },\n  mounted() {\n    // Fetch the data for the individual post using the route parameter\n    const postId = this.$route.params.id;\n    this.fetchPost(postId);\n  },\n  methods: {\n      fetchPost(postId) {\n          // Fetch the data for the individual post\n          fetch(`http://localhost:3000/post/get/${postId}`)\n          .then((response) => response.json())\n          .then((data) => {\n              this.post = data; // Directly assign the response data\n          })\n          .catch((error) => {\n              console.error(\"Error fetching individual post:\", error);\n          });\n      },\n\n      updatePost() {\n        // Get the updated body directly from the textarea\n        const updatedBody = document.querySelector('.post-body textarea').value;\n\n        // Send a request to update the post's body on the server\n        fetch(`http://localhost:3000/post/update/${this.post.id}`, {\n          method: 'PUT', // Assuming you're using a PUT request for updates\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            body: updatedBody,\n          }),\n        })\n          .then((response) => response.json())\n          .then((data) => {\n            console.log('Post updated:', data);\n\n          // After updating, navigate back to the home page\n          this.$router.push('/');\n          })\n          .catch((error) => {\n            console.error('Error updating post:', error);\n          });\n      },\n\n      deletePost() {\n      },\n  },\n};\n</script>\n\n<style>\n.individual-post {\n  margin: 0 auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n\n.post-body {\n  margin: 20px 0;\n  width: 60%;\n  height: 50%;\n}\n\n\nbutton {\n  padding: 12px 20px;\n  margin-right: 10px;\n  cursor: pointer;\n  background-color: deepskyblue;\n  border: none;\n  border-radius: 8px;\n  font-size: 16px;\n}\n\n.post-actions {\n  display: flex;\n  gap: 20px;\n}\n\ntextarea {\n  width: 100%;\n  height: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  font-size: 14px;\n  resize: vertical; /* Allow vertical resizing */\n}\n</style>\n  "],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAErBA,KAAK,EAAC;AAAW;;EAGjBA,KAAK,EAAC;AAAc;;uBAL3BC,mBAAA,CASM,OATNC,UASM,GARJC,mBAAA,CAAgC,YAAAC,gBAAA,WAAfC,KAAA,CAAAC,IAAI,CAACC,EAAE,kBACxBJ,mBAAA,CAEM,OAFNK,UAEM,GADJL,mBAAA,CAAoC,kBAAAC,gBAAA,CAAvBC,KAAA,CAAAC,IAAI,CAACG,IAAI,iB,GAExBN,mBAAA,CAGM,OAHNO,UAGM,GAFJP,mBAAA,CAA2C;IAAlCQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;KAAE,QAAM,GAClCV,mBAAA,CAA2C;IAAlCQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,UAAA,IAAAF,QAAA,CAAAE,UAAA,IAAAH,IAAA,CAAU;KAAE,QAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}