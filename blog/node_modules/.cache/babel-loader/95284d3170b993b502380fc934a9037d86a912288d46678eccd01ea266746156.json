{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\nfunction formatDate(dateString) {\n  const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  };\n  return new Date(dateString).toLocaleDateString('en-US', options);\n}\nexport default createStore({\n  state: {\n    posts: []\n  },\n  getters: {\n    getPosts: state => {\n      return state.posts;\n    }\n  },\n  mutations: {\n    setPosts(state, posts) {\n      state.posts = posts.map(post => {\n        return {\n          id: post.id,\n          body: post.body,\n          date: formatDate(post.date) // Format the date\n        };\n      });\n    },\n\n    addPost(state, post) {\n      const formattedPost = {\n        body: post.body,\n        date: formatDate(post.date)\n      };\n      state.posts.push(formattedPost);\n    }\n  },\n  actions: {\n    addPostAct({\n      commit\n    }, data) {\n      try {\n        const response = fetch(\"http://localhost:3000/post/add-post\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        });\n        const result = response.json();\n        commit('addPost', result); // Assuming your POST request returns the added post\n      } catch (e) {\n        console.error(e);\n      }\n    },\n    getAllPostsAct({\n      commit\n    }) {\n      try {\n        fetch(`http://localhost:3000/post/get-all`).then(response => response.json()).then(data => commit('setPosts', data)); // Correctly pass a function to .then\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","formatDate","dateString","options","year","month","day","Date","toLocaleDateString","state","posts","getters","getPosts","mutations","setPosts","map","post","id","body","date","addPost","formattedPost","push","actions","addPostAct","commit","data","response","fetch","method","headers","credentials","JSON","stringify","result","json","e","console","error","getAllPostsAct","then","err","message","modules"],"sources":["C:/Users/Joosep Lember/OneDrive/Documents/Ãœlikooli proge/WAD-HW/WAD2023-AP/blog/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\n\r\nfunction formatDate(dateString) {\r\n  const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n  return new Date(dateString).toLocaleDateString('en-US', options);\r\n}\r\n\r\nexport default createStore({\r\n  state: {\r\n    posts: []\r\n  },\r\n  getters: {\r\n    getPosts: (state) => {\r\n      return state.posts;\r\n    },\r\n  },\r\n\r\n  mutations: {\r\n    setPosts(state, posts) {\r\n      state.posts = posts.map(post => {\r\n        return {\r\n          id: post.id,\r\n          body: post.body,\r\n          date: formatDate(post.date) // Format the date\r\n        };\r\n      });\r\n    },\r\n\r\n    addPost(state, post) {\r\n      const formattedPost = {\r\n        body: post.body,\r\n        date: formatDate(post.date)\r\n      };\r\n      state.posts.push(formattedPost);\r\n    }\r\n  },\r\n\r\n  actions: {\r\n     addPostAct({ commit }, data) {\r\n      try {\r\n        const response =  fetch(\"http://localhost:3000/post/add-post\", {\r\n          method: \"POST\",\r\n          headers: {\"Content-Type\": \"application/json\"},\r\n          credentials: 'include',\r\n          body: JSON.stringify(data)\r\n        });\r\n        const result =  response.json();\r\n        commit('addPost', result); // Assuming your POST request returns the added post\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    },\r\n\r\n    getAllPostsAct({ commit }) {\r\n      try {\r\n        fetch(`http://localhost:3000/post/get-all`)\r\n            .then((response) => response.json())\r\n            .then((data) => commit('setPosts', data)); // Correctly pass a function to .then\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    },\r\n\r\n  },\r\n\r\n  modules: {\r\n  }\r\n})\r\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,MAAM;AAElC,SAASC,UAAUA,CAACC,UAAU,EAAE;EAC9B,MAAMC,OAAO,GAAG;IAAEC,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAU,CAAC;EACnE,OAAO,IAAIC,IAAI,CAACL,UAAU,CAAC,CAACM,kBAAkB,CAAC,OAAO,EAAEL,OAAO,CAAC;AAClE;AAEA,eAAeH,WAAW,CAAC;EACzBS,KAAK,EAAE;IACLC,KAAK,EAAE;EACT,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQ,EAAGH,KAAK,IAAK;MACnB,OAAOA,KAAK,CAACC,KAAK;IACpB;EACF,CAAC;EAEDG,SAAS,EAAE;IACTC,QAAQA,CAACL,KAAK,EAAEC,KAAK,EAAE;MACrBD,KAAK,CAACC,KAAK,GAAGA,KAAK,CAACK,GAAG,CAACC,IAAI,IAAI;QAC9B,OAAO;UACLC,EAAE,EAAED,IAAI,CAACC,EAAE;UACXC,IAAI,EAAEF,IAAI,CAACE,IAAI;UACfC,IAAI,EAAElB,UAAU,CAACe,IAAI,CAACG,IAAI,CAAC,CAAC;QAC9B,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;;IAEDC,OAAOA,CAACX,KAAK,EAAEO,IAAI,EAAE;MACnB,MAAMK,aAAa,GAAG;QACpBH,IAAI,EAAEF,IAAI,CAACE,IAAI;QACfC,IAAI,EAAElB,UAAU,CAACe,IAAI,CAACG,IAAI;MAC5B,CAAC;MACDV,KAAK,CAACC,KAAK,CAACY,IAAI,CAACD,aAAa,CAAC;IACjC;EACF,CAAC;EAEDE,OAAO,EAAE;IACNC,UAAUA,CAAC;MAAEC;IAAO,CAAC,EAAEC,IAAI,EAAE;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAIC,KAAK,CAAC,qCAAqC,EAAE;UAC7DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAC,cAAc,EAAE;UAAkB,CAAC;UAC7CC,WAAW,EAAE,SAAS;UACtBb,IAAI,EAAEc,IAAI,CAACC,SAAS,CAACP,IAAI;QAC3B,CAAC,CAAC;QACF,MAAMQ,MAAM,GAAIP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAC/BV,MAAM,CAAC,SAAS,EAAES,MAAM,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOE,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MAClB;IACF,CAAC;IAEDG,cAAcA,CAAC;MAAEd;IAAO,CAAC,EAAE;MACzB,IAAI;QACFG,KAAK,CAAE,oCAAmC,CAAC,CACtCY,IAAI,CAAEb,QAAQ,IAAKA,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CACnCK,IAAI,CAAEd,IAAI,IAAKD,MAAM,CAAC,UAAU,EAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC,OAAOe,GAAG,EAAE;QACZJ,OAAO,CAACC,KAAK,CAACG,GAAG,CAACC,OAAO,CAAC;MAC5B;IACF;EAEF,CAAC;EAEDC,OAAO,EAAE,CACT;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}